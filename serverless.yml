service: okta-hooks

provider:
  name: aws
  stage: ${env:ENVIRONMENT}
  runtime: nodejs10.x
  region: us-east-1
  vpc:
    securityGroupIds:
      - ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.webapp_elb_sg}
    subnetIds: ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.prod_apps_1_all}
  stackTags:
    owner: apps@cru.org
    application: ${env:PROJECT_NAME}
    env: ${env:ENVIRONMENT}
  environment: ${file(serverless/environment.js)}

package:
  exclude:
    - .serverless/**
    - .webpack/**
    - .git/**
    - test/**
    - '**/*.test.js'
    - '**/*.sql'
    - .deployment/**

plugins:
  - '@cruglobal/serverless-merge-config'
  - serverless-webpack

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: yarn

resources:
  Resources:
    IamRoleLambdaExecution:
      Properties:
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess

    OktaLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: okta-hooks-${env:ENVIRONMENT}-alb
        Type: application
        Scheme: internet-facing
        IpAddressType: ipv4
        SecurityGroups:
          - ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.webapp_elb_sg}
        Subnets: ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.prod_public_1_all}
        LoadBalancerAttributes:
          - Key: access_logs.s3.enabled
            Value: true
          - Key: access_logs.s3.bucket
            Value: cru-alb-logs
          - Key: access_logs.s3.prefix
            Value: okta-hooks/${env:ENVIRONMENT}

    OktaLoadBalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn:
          Ref: OktaLoadBalancer
        Certificates:
          - CertificateArn: ${file(${env:ECS_CONFIG}/bin/vars.yml):us-east-1.cru_wildcard_ssl}
        DefaultActions:
          - Type: fixed-response
            Order: 1
            FixedResponseConfig:
              StatusCode: 404
              ContentType: application/json
              MessageBody: '{"error": "Not Found"}'
        Port: 443
        Protocol: HTTPS

  Outputs:
    LoadBalancer:
      Value:
        Fn::GetAtt: [OktaLoadBalancer, DNSName]

functions:
#  verification:
#    handler: hooks/verification.handler
#    events:
#      - alb:
#          listenerArn:
#            Ref: OktaLoadBalancerListener
#          priority: 1
#          conditions:
#            method:
#              - GET

  registration:
    handler: hooks/inline/registration.handler
    memorySize: 128
    timeout: 5
    description: Registration hook to generate a new GUID.
    events:
      - alb:
          listenerArn:
            Ref: OktaLoadBalancerListener
          priority: 1
          conditions:
            header:
              name: Authorization
              values:
                - ${env:OKTA_SHARED_SECRET}
            method:
              - POST
            path: /registration
